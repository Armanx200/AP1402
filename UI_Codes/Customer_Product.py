# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Customer_Product.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pickle
import sys,os
dir_path = os.path.dirname(os.path.realpath(__file__))
os.chdir(dir_path)
sys.path.append('../classes/')
sys.path.append('../DataBase/')

class Ui_Main_Customer(object):
    def setupUi(self, Main_Customer,pro):
        self.spinbox_list = []
        self.pro = pro
        self.page = Main_Customer
        Main_Customer.setObjectName("Main_Customer")
        Main_Customer.resize(1038, 570)
        Main_Customer.setMinimumSize(QtCore.QSize(1038, 570))
        Main_Customer.setMaximumSize(QtCore.QSize(1038, 570))
        self.verticalLayout = QtWidgets.QVBoxLayout(Main_Customer)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Header = QtWidgets.QHBoxLayout()
        self.Header.setObjectName("Header")
        self.Back_PB = QtWidgets.QPushButton(Main_Customer)
        self.Back_PB.setMinimumSize(QtCore.QSize(73, 69))
        self.Back_PB.setMaximumSize(QtCore.QSize(73, 69))
        self.Back_PB.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../Images/Back.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Back_PB.setIcon(icon)
        self.Back_PB.setIconSize(QtCore.QSize(60, 60))
        self.Back_PB.setObjectName("Back_PB")
        self.Header.addWidget(self.Back_PB)
        self.Exit_PB = QtWidgets.QPushButton(Main_Customer)
        self.Exit_PB.setMinimumSize(QtCore.QSize(73, 69))
        self.Exit_PB.setMaximumSize(QtCore.QSize(73, 69))
        self.Exit_PB.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../Images/Exit.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Exit_PB.setIcon(icon1)
        self.Exit_PB.setIconSize(QtCore.QSize(60, 60))
        self.Exit_PB.setAutoDefault(False)
        self.Exit_PB.setDefault(False)
        self.Exit_PB.setFlat(False)
        self.Exit_PB.setObjectName("Exit_PB")
        self.Header.addWidget(self.Exit_PB)
        self.Cart_PB = QtWidgets.QPushButton(Main_Customer)
        self.Cart_PB.setMinimumSize(QtCore.QSize(73, 69))
        self.Cart_PB.setMaximumSize(QtCore.QSize(150, 69))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Cart_PB.setFont(font)
        self.Cart_PB.setStyleSheet("color: #f08804;")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("../Images/Cart.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Cart_PB.setIcon(icon2)
        self.Cart_PB.setIconSize(QtCore.QSize(60, 60))
        self.Cart_PB.setObjectName("Cart_PB")
        self.Header.addWidget(self.Cart_PB)
        self.Wishlist_PB = QtWidgets.QPushButton(Main_Customer)
        self.Wishlist_PB.setMinimumSize(QtCore.QSize(73, 69))
        self.Wishlist_PB.setMaximumSize(QtCore.QSize(73, 69))
        self.Wishlist_PB.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("../Images/WishList.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Wishlist_PB.setIcon(icon3)
        self.Wishlist_PB.setIconSize(QtCore.QSize(60, 60))
        self.Wishlist_PB.setObjectName("Wishlist_PB")
        self.Header.addWidget(self.Wishlist_PB)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.Header.addItem(spacerItem)
        self.Specs_GL = QtWidgets.QGridLayout()
        self.Specs_GL.setObjectName("Specs_GL")
        self.Email_var = QtWidgets.QLabel(Main_Customer)
        self.Email_var.setObjectName("Email_var")
        self.Specs_GL.addWidget(self.Email_var, 1, 1, 1, 1)
        self.Email_LB = QtWidgets.QLabel(Main_Customer)
        self.Email_LB.setObjectName("Email_LB")
        self.Specs_GL.addWidget(self.Email_LB, 1, 2, 1, 1)
        self.ID_LB = QtWidgets.QLabel(Main_Customer)
        self.ID_LB.setObjectName("ID_LB")
        self.Specs_GL.addWidget(self.ID_LB, 2, 2, 1, 1)
        self.ID_var = QtWidgets.QLabel(Main_Customer)
        self.ID_var.setObjectName("ID_var")
        self.Specs_GL.addWidget(self.ID_var, 2, 1, 1, 1)
        self.Name_var = QtWidgets.QLabel(Main_Customer)
        self.Name_var.setObjectName("Name_var")
        self.Specs_GL.addWidget(self.Name_var, 0, 1, 1, 1)
        self.Name_LB = QtWidgets.QLabel(Main_Customer)
        self.Name_LB.setObjectName("Name_LB")
        self.Specs_GL.addWidget(self.Name_LB, 0, 2, 1, 1)
        self.Header.addLayout(self.Specs_GL)
        self.Header_HL = QtWidgets.QHBoxLayout()
        self.Header_HL.setObjectName("Header_HL")
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.Header_HL.addItem(spacerItem1)
        self.Unit_LB = QtWidgets.QLabel(Main_Customer)
        self.Unit_LB.setMaximumSize(QtCore.QSize(500, 50))
        self.Unit_LB.setObjectName("Unit_LB")
        self.Header_HL.addWidget(self.Unit_LB, 0, QtCore.Qt.AlignRight)
        self.Money_var = QtWidgets.QLabel(Main_Customer)
        self.Money_var.setMaximumSize(QtCore.QSize(500, 50))
        self.Money_var.setObjectName("Money_var")
        self.Header_HL.addWidget(self.Money_var, 0, QtCore.Qt.AlignLeft)
        self.Bal_LB = QtWidgets.QLabel(Main_Customer)
        self.Bal_LB.setMaximumSize(QtCore.QSize(500, 50))
        self.Bal_LB.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.Bal_LB.setObjectName("Bal_LB")
        self.Header_HL.addWidget(self.Bal_LB, 0, QtCore.Qt.AlignRight)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.Header_HL.addItem(spacerItem2)
        self.Shop_Name_LB = QtWidgets.QLabel(Main_Customer)
        self.Shop_Name_LB.setMaximumSize(QtCore.QSize(500, 50))
        self.Shop_Name_LB.setObjectName("Shop_Name_LB")
        self.Header_HL.addWidget(self.Shop_Name_LB)
        self.Header_HL.setStretch(0, 4)
        self.Header_HL.setStretch(4, 4)
        self.Header.addLayout(self.Header_HL)
        self.Header.setStretch(6, 1)
        self.verticalLayout.addLayout(self.Header)
        self.line = QtWidgets.QFrame(Main_Customer)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout.addWidget(self.line)
        self.Main = QtWidgets.QGridLayout()
        self.Main.setObjectName("Main")
        self.Main_VL = QtWidgets.QVBoxLayout()
        self.Main_VL.setObjectName("Main_VL")
        self.Main_SA = QtWidgets.QScrollArea(Main_Customer)
        self.Main_SA.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Main_SA.setWidgetResizable(True)
        self.Main_SA.setObjectName("Main_SA")
        self.Main_QW = QtWidgets.QWidget()
        self.Main_QW.setGeometry(QtCore.QRect(0, -642, 989, 1134))
        self.Main_QW.setObjectName("Main_QW")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.Main_QW)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Item_GL_1 = QtWidgets.QWidget(self.Main_QW)
        self.Item_GL_1.setMinimumSize(QtCore.QSize(900, 350))
        self.Item_GL_1.setMaximumSize(QtCore.QSize(1000, 350))
        self.Item_GL_1.setStyleSheet("background-color:White;")
        self.Item_GL_1.setObjectName("Item_GL_1")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.Item_GL_1)
        self.gridLayout_2.setContentsMargins(30, 30, 30, 30)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_3 = QtWidgets.QLabel(self.Item_GL_1)
        self.label_3.setObjectName("label_3")
        self.gridLayout_2.addWidget(self.label_3, 2, 0, 1, 1)
        self.Rate_2 = QtWidgets.QToolButton(self.Item_GL_1)
        self.Rate_2.setMinimumSize(QtCore.QSize(90, 0))
        self.Rate_2.setStyleSheet("background-color: rgb(0,0,0,0)")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("../Images/Comment.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Rate_2.setIcon(icon4)
        self.Rate_2.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.Rate_2.setObjectName("Rate_2")
        self.gridLayout_2.addWidget(self.Rate_2, 2, 2, 1, 1, QtCore.Qt.AlignHCenter)
        self.label_2 = QtWidgets.QLabel(self.Item_GL_1)
        self.label_2.setMinimumSize(QtCore.QSize(0, 50))
        self.label_2.setMaximumSize(QtCore.QSize(150, 500))
        self.label_2.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_2.setObjectName("label_2")
        self.gridLayout_2.addWidget(self.label_2, 1, 0, 1, 1)
        self.Picture_1 = QtWidgets.QToolButton(self.Item_GL_1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Picture_1.sizePolicy().hasHeightForWidth())
        self.Picture_1.setSizePolicy(sizePolicy)
        self.Picture_1.setMinimumSize(QtCore.QSize(200, 150))
        self.Picture_1.setMaximumSize(QtCore.QSize(200, 150))
        self.Picture_1.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.Picture_1.setAutoFillBackground(False)
        self.Picture_1.setStyleSheet("background-color:rgb(0,0,0,0);")
        self.Picture_1.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("../Images/UserUploaded imgs/Product.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Picture_1.setIcon(icon5)
        self.Picture_1.setIconSize(QtCore.QSize(200, 200))
        self.Picture_1.setObjectName("Picture_1")
        self.gridLayout_2.addWidget(self.Picture_1, 0, 2, 1, 1)
        self.Rate = QtWidgets.QToolButton(self.Item_GL_1)
        self.Rate.setMinimumSize(QtCore.QSize(90, 0))
        self.Rate.setStyleSheet("background-color: rgb(0,0,0,0)")
        self.Rate.setIcon(icon3)
        self.Rate.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.Rate.setObjectName("Rate")
        self.gridLayout_2.addWidget(self.Rate, 1, 2, 1, 1, QtCore.Qt.AlignHCenter)
        self.Description = QtWidgets.QWidget(self.Item_GL_1)
        self.Description.setStyleSheet("background-color: rgb(243, 243, 243);\n"
"")
        self.Description.setObjectName("Description")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.Description)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(self.Description)
        self.label.setMinimumSize(QtCore.QSize(580, 50))
        self.label.setMaximumSize(QtCore.QSize(800, 50))
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.toolButton_3 = QtWidgets.QToolButton(self.Description)
        self.toolButton_3.setMinimumSize(QtCore.QSize(0, 60))
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("../Images/Add.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButton_3.setIcon(icon6)
        self.toolButton_3.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton_3.setObjectName("toolButton_3")
        self.verticalLayout_2.addWidget(self.toolButton_3, 0, QtCore.Qt.AlignHCenter)
        self.gridLayout_2.addWidget(self.Description, 0, 0, 1, 1)
        self.verticalLayout_3.addWidget(self.Item_GL_1)
        self.Comment_QW = QtWidgets.QWidget(self.Main_QW)
        self.Comment_QW.setStyleSheet("\n"
"background-color: rgb(255, 255, 255);")
        self.Comment_QW.setObjectName("Comment_QW")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.Comment_QW)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_12 = QtWidgets.QLabel(self.Comment_QW)
        self.label_12.setObjectName("label_12")
        self.verticalLayout_4.addWidget(self.label_12)
        self.toolButton = QtWidgets.QToolButton(self.Comment_QW)
        self.toolButton.setIcon(icon4)
        self.toolButton.setIconSize(QtCore.QSize(60, 60))
        self.toolButton.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton.setObjectName("toolButton")
        self.verticalLayout_4.addWidget(self.toolButton, 0, QtCore.Qt.AlignRight)
        self.lineEdit = QtWidgets.QLineEdit(self.Comment_QW)
        self.lineEdit.setMinimumSize(QtCore.QSize(500, 0))
        self.lineEdit.setObjectName("lineEdit")
        self.verticalLayout_4.addWidget(self.lineEdit)
        self.Comment_GL_2 = QtWidgets.QWidget(self.Comment_QW)
        self.Comment_GL_2.setStyleSheet("background-color: rgb(224, 255, 255);")
        self.Comment_GL_2.setObjectName("Comment_GL_2")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.Comment_GL_2)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.Comment_Name_LB_2 = QtWidgets.QLabel(self.Comment_GL_2)
        self.Comment_Name_LB_2.setObjectName("Comment_Name_LB_2")
        self.gridLayout_9.addWidget(self.Comment_Name_LB_2, 0, 2, 1, 1, QtCore.Qt.AlignRight)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_9.addItem(spacerItem3, 0, 0, 1, 1)
        self.Comment_LB_Text_2 = QtWidgets.QLabel(self.Comment_GL_2)
        self.Comment_LB_Text_2.setObjectName("Comment_LB_Text_2")
        self.gridLayout_9.addWidget(self.Comment_LB_Text_2, 1, 1, 1, 1, QtCore.Qt.AlignRight)
        self.Comment_LB_2 = QtWidgets.QLabel(self.Comment_GL_2)
        self.Comment_LB_2.setObjectName("Comment_LB_2")
        self.gridLayout_9.addWidget(self.Comment_LB_2, 1, 0, 1, 1, QtCore.Qt.AlignRight)
        self.Comment_Count_2 = QtWidgets.QLabel(self.Comment_GL_2)
        self.Comment_Count_2.setObjectName("Comment_Count_2")
        self.gridLayout_9.addWidget(self.Comment_Count_2, 1, 2, 1, 1, QtCore.Qt.AlignRight)
        self.verticalLayout_4.addWidget(self.Comment_GL_2)
        self.Comment_GL = QtWidgets.QWidget(self.Comment_QW)
        self.Comment_GL.setStyleSheet("background-color: rgb(224, 255, 255);")
        self.Comment_GL.setObjectName("Comment_GL")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.Comment_GL)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.Comment_Name_LB = QtWidgets.QLabel(self.Comment_GL)
        self.Comment_Name_LB.setObjectName("Comment_Name_LB")
        self.gridLayout_6.addWidget(self.Comment_Name_LB, 0, 2, 1, 1, QtCore.Qt.AlignRight)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_6.addItem(spacerItem4, 0, 0, 1, 1)
        self.Comment_LB_Text = QtWidgets.QLabel(self.Comment_GL)
        self.Comment_LB_Text.setObjectName("Comment_LB_Text")
        self.gridLayout_6.addWidget(self.Comment_LB_Text, 1, 1, 1, 1, QtCore.Qt.AlignRight)
        self.Comment_LB = QtWidgets.QLabel(self.Comment_GL)
        self.Comment_LB.setObjectName("Comment_LB")
        self.gridLayout_6.addWidget(self.Comment_LB, 1, 0, 1, 1, QtCore.Qt.AlignRight)
        self.Comment_Count = QtWidgets.QLabel(self.Comment_GL)
        self.Comment_Count.setObjectName("Comment_Count")
        self.gridLayout_6.addWidget(self.Comment_Count, 1, 2, 1, 1, QtCore.Qt.AlignRight)
        self.verticalLayout_4.addWidget(self.Comment_GL)
        self.verticalLayout_3.addWidget(self.Comment_QW)
        self.Main_Line = QtWidgets.QFrame(self.Main_QW)
        self.Main_Line.setFrameShape(QtWidgets.QFrame.HLine)
        self.Main_Line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Main_Line.setObjectName("Main_Line")
        self.verticalLayout_3.addWidget(self.Main_Line)
        
        with open('../DataBase/logined.pkl', 'rb') as handle:
            self.c = pickle.load(handle)
        self.btn_grp = QtWidgets.QButtonGroup()
        self.btn_grp.setExclusive(True)
        self.add_seller()
        self.btn_grp.buttonClicked.connect(self.add_button)



        self.Main_SA.setWidget(self.Main_QW)
        self.Main_VL.addWidget(self.Main_SA)
        self.Main.addLayout(self.Main_VL, 0, 0, 1, 1)
        self.verticalLayout.addLayout(self.Main)

        ### Header ###
        with open('../DataBase/logined.pkl', 'rb') as handle:
            c = pickle.load(handle)
        self.c = c
        self.Back_PB.clicked.connect(self.back)  #pushButton_2 = Back_PB
        self.Exit_PB.clicked.connect(self.logout)
        self.Wishlist_PB.clicked.connect(self.wishlist)
        self.Cart_PB.clicked.connect(self.cart)
        self.Email_var.setText(c.Email)
        self.ID_var.setText(c.ID)
        self.Name_var.setText(c.Name)
        self.Money_var.setText(str(c.Wallet))
        self.Cart_PB.setText(str(self.sumofcart()))
        ### Main ###
        self.label.setText(f"<html><head/><body><p align=\"right\"><span style=\" font-size:18pt; font-weight:600; color:#4c4c4c;\">{self.pro.Name}</span></p></body></html>")
        self.Rate_2.setText("0") ## comment
        self.Rate.setText(f"{self.pro.Rating} / 5")
        self.label_3.setText(f"<html><head/><body><p align=\"right\"><span style=\" font-weight:600;\">{self.pro.Description} Text</span></p></body></html>")
        self.retranslateUi(Main_Customer)
        QtCore.QMetaObject.connectSlotsByName(Main_Customer)
        self.toolButton_3.clicked.connect(self.add_to_wishlist)

        self.retranslateUi(Main_Customer)
        QtCore.QMetaObject.connectSlotsByName(Main_Customer)

    def retranslateUi(self, Main_Customer):
        _translate = QtCore.QCoreApplication.translate
        Main_Customer.setWindowTitle(_translate("Main_Customer", "Product"))
        self.Email_LB.setText(_translate("Main_Customer", "ایمیل :"))
        self.ID_LB.setText(_translate("Main_Customer", "آیدی :"))
        self.Name_LB.setText(_translate("Main_Customer", "نام : "))
        self.Unit_LB.setText(_translate("Main_Customer", "ریال"))
        self.Bal_LB.setText(_translate("Main_Customer", "<html><head/><body><p align=\"right\"><span style=\" font-size:12pt;\">: موجودی</span></p></body></html>"))
        self.Shop_Name_LB.setText(_translate("Main_Customer", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">فروشگاه من</span></p></body></html>"))
        self.label_2.setText(_translate("Main_Customer", "<html><head/><body><p align=\"right\"><span style=\" font-size:14pt; font-weight:600;\"> : مشخصات</span></p></body></html>"))
        self.toolButton_3.setText(_translate("Main_Customer", "افزودن به لیست\n"
"علاقه مندی ها"))
        self.label_12.setText(_translate("Main_Customer", "<html><head/><body><p align=\"right\"><span style=\" font-size:20pt; font-weight:600;\">نظرات</span></p></body></html>"))
        self.toolButton.setText(_translate("Main_Customer", "ثبت نظر"))
        self.lineEdit.setPlaceholderText(_translate("Main_Customer", "نظر خود را وارد کنید."))
        self.Comment_Name_LB_2.setText(_translate("Main_Customer", "Name"))
        self.Comment_LB_Text_2.setText(_translate("Main_Customer", "نظر :"))
        self.Comment_LB_2.setText(_translate("Main_Customer", "Comment"))
        self.Comment_Count_2.setText(_translate("Main_Customer", "Count"))
        self.Comment_Name_LB.setText(_translate("Main_Customer", "Name"))
        self.Comment_LB_Text.setText(_translate("Main_Customer", "نظر :"))
        self.Comment_LB.setText(_translate("Main_Customer", "Comment"))
        self.Comment_Count.setText(_translate("Main_Customer", "Count"))
        
        


### Header ###
    def logout(self):
        with open('../DataBase/logined.pkl', 'wb') as handle:
            pickle.dump(0, handle)
        self.page.close()
        os.system('python Main.py')

    def wishlist(self):
        from Customer_WishList import Ui_Main_Customer
        self.WishListPage = QtWidgets.QWidget()
        self.ui = Ui_Main_Customer()
        self.ui.setupUi(self.WishListPage)
        
        self.page.hide()
        self.WishListPage.show()

    def cart(self):
        from Customer_Cart import Ui_Main_Customer
        self.CartPage = QtWidgets.QWidget()
        self.ui = Ui_Main_Customer()
        self.ui.setupUi(self.CartPage)
        
        self.page.hide()
        self.CartPage.show()
    
    def back(self):
        from Customer_Main import Ui_Main_Customer
        self.MainPage = QtWidgets.QWidget()
        self.ui = Ui_Main_Customer()
        self.ui.setupUi(self.MainPage)
        
        self.page.hide()
        self.MainPage.show()
    ### Main ###

    def add_to_wishlist(self):
        with open('../DataBase/logined.pkl', 'rb') as handle:
            self.c = pickle.load(handle)
        flag = True
        for Wish in self.c.Wishlist:
            if self.pro.ID == Wish.ID:
                flag = False
        if flag:
            self.c.Wishlist.append(self.pro)
            with open('../DataBase/logined.pkl', 'wb') as handle:
                pickle.dump(self.c, handle)
            with open('../DataBase/Customers.pkl', 'rb') as handle:
                    Customers_List = pickle.load(handle)
            for i,C in enumerate(Customers_List):
                if self.c.Email == C.Email:
                    Customers_List[i] = self.c
            with open('../DataBase/Customers.pkl', 'wb') as handle:
                pickle.dump(Customers_List, handle)


    def add_seller(self):
        with open('../DataBase/Items.pkl', 'rb') as handle:
            self.Items_list2 = pickle.load(handle)
        self.Items_list = []
        for item in self.Items_list2:
            if item.Product_ID.ID == self.pro.ID and item.Count>0:
                self.Items_list.append(item)

        for item in self.Items_list:
            icon6 = QtGui.QIcon()
            icon6.addPixmap(QtGui.QPixmap("../Images/Add.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            Seller_BL_1 = QtWidgets.QVBoxLayout()
            Seller_BL_1.setObjectName("Seller_BL_1")
            Seller_QW_1 = QtWidgets.QWidget(self.Main_QW)
            Seller_QW_1.setStyleSheet("background-color: rgb(248, 248, 248);")
            Seller_QW_1.setObjectName("Seller_QW_1")
            gridLayout_3 = QtWidgets.QGridLayout(Seller_QW_1)
            gridLayout_3.setContentsMargins(10, 10, 10, 10)
            gridLayout_3.setObjectName("gridLayout_3")
            Seller_Cost_VL = QtWidgets.QVBoxLayout()
            Seller_Cost_VL.setObjectName("Seller_Cost_VL")
            Money_LB = QtWidgets.QLabel(Seller_QW_1)
            Money_LB.setMinimumSize(QtCore.QSize(150, 50))
            Money_LB.setObjectName("Money_LB")
            Seller_Cost_VL.addWidget(Money_LB)
            Amount_LB = QtWidgets.QLabel(Seller_QW_1)
            Amount_LB.setLayoutDirection(QtCore.Qt.LeftToRight)
            Amount_LB.setObjectName("Amount_LB")
            Seller_Cost_VL.addWidget(Amount_LB, 0, QtCore.Qt.AlignHCenter)
            gridLayout_3.addLayout(Seller_Cost_VL, 0, 2, 1, 1)
            Buy_VL = QtWidgets.QVBoxLayout()
            Buy_VL.setObjectName("Buy_VL")
            Buy_PB = QtWidgets.QToolButton(Seller_QW_1)
            Buy_PB.setMinimumSize(QtCore.QSize(100, 150))
            Buy_PB.setIcon(icon6)
            Buy_PB.setIconSize(QtCore.QSize(60, 60))
            Buy_PB.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
            Buy_PB.setObjectName("Buy_PB")
            Buy_PB.setCheckable(True)
            self.btn_grp.addButton(Buy_PB)

            Buy_VL.addWidget(Buy_PB)
            Amount_SB = QtWidgets.QSpinBox(Seller_QW_1)
            Amount_SB.setObjectName("Amount_SB")
            Amount_SB.setMaximum(int(item.Count))
            Amount_SB.setMinimum(1)
            self.spinbox_list.append(Amount_SB)
            Buy_VL.addWidget(Amount_SB)
            gridLayout_3.addLayout(Buy_VL, 0, 1, 1, 1)
            Seller_Name_LB = QtWidgets.QLabel(Seller_QW_1)
            Seller_Name_LB.setObjectName("Seller_Name_LB")
            gridLayout_3.addWidget(Seller_Name_LB, 0, 7, 1, 1, QtCore.Qt.AlignRight)
            Count_HL = QtWidgets.QHBoxLayout()
            Count_HL.setObjectName("Count_HL")
            spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
            Count_HL.addItem(spacerItem7)
            Count_LB = QtWidgets.QLabel(Seller_QW_1)
            Count_LB.setLayoutDirection(QtCore.Qt.LeftToRight)
            Count_LB.setObjectName("Count_LB")
            Count_HL.addWidget(Count_LB, 0, QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
            Count_LB_Text = QtWidgets.QLabel(Seller_QW_1)
            sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
            sizePolicy.setHorizontalStretch(0)
            sizePolicy.setVerticalStretch(0)
            sizePolicy.setHeightForWidth(Count_LB_Text.sizePolicy().hasHeightForWidth())
            Count_LB_Text.setSizePolicy(sizePolicy)
            Count_LB_Text.setMinimumSize(QtCore.QSize(0, 0))
            Count_LB_Text.setMaximumSize(QtCore.QSize(16777215, 16777215))
            Count_LB_Text.setObjectName("Count_LB_Text")
            Count_HL.addWidget(Count_LB_Text)
            gridLayout_3.addLayout(Count_HL, 0, 4, 1, 1)
            Seller_Name_LB_Text = QtWidgets.QLabel(Seller_QW_1)
            Seller_Name_LB_Text.setObjectName("Seller_Name_LB_Text")
            gridLayout_3.addWidget(Seller_Name_LB_Text, 0, 8, 1, 1, QtCore.Qt.AlignRight)
            spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
            gridLayout_3.addItem(spacerItem8, 0, 5, 1, 1)
            Seller_BL_1.addWidget(Seller_QW_1)
            self.verticalLayout_3.addLayout(Seller_BL_1)

            Money_LB.setText("قیمت: ")
            Amount_LB.setText(f"<html><head/><body><p align=\"right\">ریال {item.Cost}</p></body></html>")
            Buy_PB.setText("اضافه به سبد\n"
            "خرید")
            Seller_Name_LB.setText(str(item.Seller_ID.Name))
            Count_LB.setText(f"<html><head/><body><p align=\"right\">{item.Count}</p></body></html>")
            Count_LB_Text.setText("تعداد: ")
            Seller_Name_LB_Text.setText("نام فروشنده: ")

            Money_LB.setText("قیمت: ")
            Amount_LB.setText(f"<html><head/><body><p align=\"right\">ریال {item.Cost}</p></body></html>")
            Buy_PB.setText("اضافه به سبد\n"
            "خرید")
            Seller_Name_LB.setText(str(item.Seller_ID.Name))
            Count_LB.setText(f"<html><head/><body><p align=\"right\">{item.Count}</p></body></html>")
            Count_LB_Text.setText("تعداد: ")
            Seller_Name_LB_Text.setText("نام فروشنده: ")

    def add_button(self, btn):
        if int(self.spinbox_list[-1*(self.btn_grp.checkedId()+1)-1].text()) > 0:
            from Buy import buy
            count = self.spinbox_list[-1*(self.btn_grp.checkedId()+1)-1].text()
            print(len(self.Items_list))
            item_id = self.Items_list[-1*(self.btn_grp.checkedId()+1)-1]
            cost = item_id.Cost
            item_id.Count -= int(count)
            items_in_Cart = [i.Item.ID for i in self.c.Cart]
            flag = False
            for i in range(len(items_in_Cart)):
                if item_id.ID == items_in_Cart[i]:
                    flag=True
                    self.c.Cart[i].Count += int(count)
                    self.c.Cart[i].Item.Count -= int(count)
            if flag==False:
                self.c.Cart.append(buy(item_id, self.c, count, cost))
            with open('../DataBase/Customers.pkl', 'rb') as handle:
                Customers_List = pickle.load(handle)
            for i,C in enumerate(Customers_List):
                if self.c.Email == C.Email:
                    Customers_List[i] = self.c
            with open('../DataBase/Customers.pkl', 'wb') as handle:
                pickle.dump(Customers_List, handle)
            with open('../DataBase/logined.pkl', 'wb') as handle:
                pickle.dump(self.c, handle)
            
            for it in self.Items_list2:
                for it2 in self.Items_list:
                    if it.ID == it2.ID:
                        it = it2

            with open('../DataBase/Items.pkl', 'wb') as handle:
                pickle.dump(self.Items_list2, handle)
            self.refresh()
    
    def refresh(self):
        self.Page = QtWidgets.QWidget()
        self.ui = Ui_Main_Customer()
        self.ui.setupUi(self.Page, self.pro)
        
        self.page.hide()
        self.Page.show()
    
    def sumofcart(self):
        sum = 0
        for By in self.c.Cart:
            sum += (By.Cost * By.Count)
        return sum
