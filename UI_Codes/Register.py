# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Register_Error.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import re
import sys,os
dir_path = os.path.dirname(os.path.realpath(__file__))
os.chdir(dir_path)
sys.path.append('../classes/')
sys.path.append('../DataBase/')
from Customer import customer
from Seller import seller
from Shop import shop
import pickle
import hashlib
from Login import Ui_LoginPage

#global page
class Ui_RegisterPage(object):
    def setupUi(self, RegisterPage):
        self.page = RegisterPage   
        RegisterPage.setObjectName("RegisterPage")
        RegisterPage.resize(448, 650)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(RegisterPage.sizePolicy().hasHeightForWidth())
        RegisterPage.setSizePolicy(sizePolicy)
        RegisterPage.setMinimumSize(QtCore.QSize(448, 650))
        RegisterPage.setMaximumSize(QtCore.QSize(448, 670))
        self.verticalLayout = QtWidgets.QVBoxLayout(RegisterPage)
        self.verticalLayout.setObjectName("verticalLayout")
        self.UpLayout = QtWidgets.QGridLayout()
        self.UpLayout.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.UpLayout.setContentsMargins(10, 30, 10, 30)
        self.UpLayout.setSpacing(47)
        self.UpLayout.setObjectName("UpLayout")
        self.UserName_LB = QtWidgets.QLabel(RegisterPage)
        self.UserName_LB.setObjectName("UserName_LB")
        self.UpLayout.addWidget(self.UserName_LB, 0, 0, 1, 1, QtCore.Qt.AlignLeft)
        self.UserName_LE = QtWidgets.QLineEdit(RegisterPage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.UserName_LE.sizePolicy().hasHeightForWidth())
        self.UserName_LE.setSizePolicy(sizePolicy)
        self.UserName_LE.setMinimumSize(QtCore.QSize(250, 40))
        self.UserName_LE.setMaximumSize(QtCore.QSize(500, 500))
        self.UserName_LE.setStyleSheet("border: 1px solid #a6a6a6;\n"
"border-top-color: #949494;\n"
"border-radius: 3px;\n"
"box-shadow: 0 1px 0 rgba(255,255,255,.5), 0 1px 0 rgba(0,0,0,.07) inset;\n"
"outline: 0;\n"
"margin-top: 1px;\n"
"")
        self.UserName_LE.setObjectName("UserName_LE")
        self.UpLayout.addWidget(self.UserName_LE, 0, 1, 1, 1)
        self.Email_LE = QtWidgets.QLineEdit(RegisterPage)
        self.Email_LE.setMinimumSize(QtCore.QSize(250, 40))
        self.Email_LE.setMaximumSize(QtCore.QSize(500, 500))
        self.Email_LE.setObjectName("Email_LE")
        self.UpLayout.addWidget(self.Email_LE, 1, 1, 1, 1)
        self.Email_LB = QtWidgets.QLabel(RegisterPage)
        self.Email_LB.setObjectName("Email_LB")
        self.Password_LE = QtWidgets.QLineEdit(RegisterPage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Password_LE.sizePolicy().hasHeightForWidth())
        self.Password_LE.setSizePolicy(sizePolicy)
        self.Password_LE.setMinimumSize(QtCore.QSize(250, 40))
        self.Password_LE.setMaximumSize(QtCore.QSize(500, 500))
        self.Password_LE.setStyleSheet("border: 1px solid #a6a6a6;\n"
"border-top-color: #949494;\n"
"border-radius: 3px;\n"
"box-shadow: 0 1px 0 rgba(255,255,255,.5), 0 1px 0 rgba(0,0,0,.07) inset;\n"
"outline: 0;")
        self.Password_LE.setEchoMode(QtWidgets.QLineEdit.Password)
        self.Password_LE.setObjectName("Password_LE")
        self.UpLayout.addWidget(self.Password_LE, 2, 1, 1, 1, QtCore.Qt.AlignLeft)
        self.Password_LB = QtWidgets.QLabel(RegisterPage)
        self.Password_LB.setObjectName("Password_LB")
        self.UpLayout.addWidget(self.Password_LB, 2, 0, 1, 1, QtCore.Qt.AlignLeft)
        self.RePassword_LB = QtWidgets.QLabel(RegisterPage)
        self.RePassword_LB.setObjectName("RePassword_LB")
        self.UpLayout.addWidget(self.RePassword_LB, 3, 0, 1, 1)
        self.RePassword_LE = QtWidgets.QLineEdit(RegisterPage)
        self.RePassword_LE.setMinimumSize(QtCore.QSize(250, 40))
        self.RePassword_LE.setMaximumSize(QtCore.QSize(500, 500))
        self.RePassword_LE.setAutoFillBackground(False)
        self.RePassword_LE.setStyleSheet("border: 1px solid #a6a6a6;\n"
"border-top-color: #949494;\n"
"border-radius: 3px;\n"
"box-shadow: 0 1px 0 rgba(255,255,255,.5), 0 1px 0 rgba(0,0,0,.07) inset;\n"
"outline: 0;")
        self.RePassword_LE.setEchoMode(QtWidgets.QLineEdit.Password)
        self.RePassword_LE.setObjectName("RePassword_LE")
        self.UpLayout.addWidget(self.RePassword_LE, 3, 1, 1, 1, QtCore.Qt.AlignLeft)
        self.Position_CB = QtWidgets.QComboBox(RegisterPage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Position_CB.sizePolicy().hasHeightForWidth())
        self.Position_CB.setSizePolicy(sizePolicy)
        self.Position_CB.setMinimumSize(QtCore.QSize(250, 40))
        self.Position_CB.setMaximumSize(QtCore.QSize(500, 500))
        self.Position_CB.setStyleSheet("border: 1px solid #a6a6a6;\n"
"border-top-color: #949494;\n"
"border-radius: 3px;\n"
"box-shadow: 0 1px 0 rgba(255,255,255,.5), 0 1px 0 rgba(0,0,0,.07) inset;\n"
"outline: 0;")
        self.Position_CB.setObjectName("Position_CB")
        self.Position_CB.addItem("")
        self.Position_CB.addItem("")
        self.UpLayout.addWidget(self.Position_CB, 4, 1, 1, 1, QtCore.Qt.AlignLeft)
        self.Position_LB = QtWidgets.QLabel(RegisterPage)
        self.Position_LB.setObjectName("Position_LB")
        self.UpLayout.addWidget(self.Position_LB, 4, 0, 1, 1, QtCore.Qt.AlignLeft)
        
        self.UpLayout.addWidget(self.Email_LB, 1, 0, 1, 1)
        self.UpLayout.setColumnStretch(0, 1)
        self.verticalLayout.addLayout(self.UpLayout)
        self.Error_Name_LB = QtWidgets.QLabel(RegisterPage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Error_Name_LB.sizePolicy().hasHeightForWidth())
        self.Error_Name_LB.setSizePolicy(sizePolicy)
        self.Error_Name_LB.setStyleSheet("color: black;")
        self.Error_Name_LB.setObjectName("Error_Name_LB")
        self.verticalLayout.addWidget(self.Error_Name_LB, 0, QtCore.Qt.AlignHCenter)
        self.Error_Email_LB = QtWidgets.QLabel(RegisterPage)
        self.Error_Email_LB.setObjectName("Error_Email_LB")
        self.verticalLayout.addWidget(self.Error_Email_LB, 0, QtCore.Qt.AlignHCenter)
        self.Error_Pass_LB = QtWidgets.QLabel(RegisterPage)
        self.Error_Pass_LB.setObjectName("Error_Pass_LB")
        self.verticalLayout.addWidget(self.Error_Pass_LB, 0, QtCore.Qt.AlignHCenter)
        self.Register_PB = QtWidgets.QPushButton(RegisterPage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Register_PB.sizePolicy().hasHeightForWidth())
        self.Register_PB.setSizePolicy(sizePolicy)
        self.Register_PB.setMinimumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Register_PB.setFont(font)
        self.Register_PB.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Register_PB.setAutoFillBackground(False)
        self.Register_PB.setStyleSheet("background: #f0c14b;\n"
"border-color: #a88734 #9c7e31 #846a29;\n"
"color: black;\n"
"")
        self.Register_PB.setCheckable(False)
        self.Register_PB.setChecked(False)
        self.Register_PB.setObjectName("Register_PB")
        self.Register_PB.clicked.connect(self.RegisterClicked)
        self.verticalLayout.addWidget(self.Register_PB, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.DownLayout = QtWidgets.QVBoxLayout()
        self.DownLayout.setContentsMargins(-1, 0, -1, 50)
        self.DownLayout.setSpacing(7)
        self.DownLayout.setObjectName("DownLayout")
        self.Singin_LB = QtWidgets.QLabel(RegisterPage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Singin_LB.sizePolicy().hasHeightForWidth())
        self.Singin_LB.setSizePolicy(sizePolicy)
        self.Singin_LB.setMaximumSize(QtCore.QSize(16777215, 30))
        self.Singin_LB.setStyleSheet("")
        self.Singin_LB.setObjectName("Singin_LB")
        self.DownLayout.addWidget(self.Singin_LB, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignBottom)
        self.Signin_PB = QtWidgets.QPushButton(RegisterPage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Signin_PB.sizePolicy().hasHeightForWidth())
        self.Signin_PB.setSizePolicy(sizePolicy)
        self.Signin_PB.setMinimumSize(QtCore.QSize(100, 0))
        self.Signin_PB.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.Signin_PB.setObjectName("Signin_PB")
        self.Signin_PB.clicked.connect(self.go_to_login)
        self.DownLayout.addWidget(self.Signin_PB, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.DownLayout.setStretch(0, 1)
        self.verticalLayout.addLayout(self.DownLayout)
        self.Error_Name_LB.setHidden(True)
        self.Error_Pass_LB.setHidden(True)
        self.Error_Email_LB.setHidden(True)

        self.retranslateUi(RegisterPage)
        QtCore.QMetaObject.connectSlotsByName(RegisterPage)
        
    def go_to_login(self):
        self.LoginPage = QtWidgets.QWidget()
        #LoginPage = QtWidgets.QWidget()
        self.page.hide()
        self.ui = Ui_LoginPage()
        self.ui.setupUi(self.LoginPage)
        
        self.LoginPage.show()

        #RegisterPage.hide()
    def RegisterClicked(self):
        _translate = QtCore.QCoreApplication.translate
        self.Error_Name_LB.setHidden(True)
        self.Error_Pass_LB.setHidden(True)
        self.Error_Email_LB.setHidden(True)
        check_name, check_email, check_pass = False, False, False
        name = self.UserName_LE.text()
        email = self.Email_LE.text().lower()
        password = self.Password_LE.text()
        repassword = self.RePassword_LE.text()
        
        if len(str(name)) <= 0:
                self.Error_Name_LB.setHidden(False)
                self.Error_Name_LB.setText(_translate("RegisterPage", "Enter your name!"))
                self.Error_Name_LB.setStyleSheet("color: Red;")
        else:
                self.Error_Name_LB.setHidden(True)
                check_name = True
                

        if len(str(password)) < 6:
                self.Error_Pass_LB.setHidden(False)
                self.Error_Pass_LB.setText(_translate("RegisterPage", "Minimum 6 characters required for password!"))
                self.Error_Pass_LB.setStyleSheet("color: Red;")
        else:
                if password != repassword:
                        self.Error_Pass_LB.setHidden(False)
                        self.Error_Pass_LB.setText(_translate("RegisterPage", "Passwords must match!"))
                        self.Error_Pass_LB.setStyleSheet("color: Red;")
                else:
                        self.Error_Name_LB.setHidden(True)
                        check_pass = True
                        
                        password_hash = hashlib.sha256(bytes(password, encoding='utf-8')).hexdigest()


        if len(str(email)) <= 0:
                self.Error_Email_LB.setHidden(False)
                self.Error_Email_LB.setText(_translate("RegisterPage", "Enter your email!"))
                self.Error_Email_LB.setStyleSheet("color: Red;")
                
        else:
                if re.fullmatch(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,7}\b', email):
                        self.Error_Name_LB.setHidden(True)
                        check_email = True
                else:
                        self.Error_Email_LB.setHidden(False)
                        self.Error_Email_LB.setText(_translate("RegisterPage", "Wrong or Invalid email address!"))
                        self.Error_Email_LB.setStyleSheet("color: Red;")  

        if check_name and check_pass and check_email:
                position = self.Position_CB.currentText()
                if position == "Customer":
                        c = customer(name,email,password_hash)
                        #print(c.Email)
                        with open('../DataBase/Customers.pkl', 'rb') as handle:
                                customers_list = pickle.load(handle)
                        #print(customers_list)
                        customer_Id_list = [i.Email for i in customers_list]
                        customers_list.append(c)
                        if c.Email not in customer_Id_list:
                                #print(customer_Id_list)
                                with open('../DataBase/Customers.pkl', 'wb') as handle:
                                        pickle.dump(customers_list, handle)
                                with open('../DataBase/logined.pkl', 'wb') as handle:
                                        pickle.dump(c, handle)
                                self.page.close()
                                os.system('python Main.py')
                        else:
                                self.Error_Email_LB.setHidden(False)
                                self.Error_Email_LB.setText(_translate("RegisterPage", "Your Email exist in our database!"))
                                self.Error_Email_LB.setStyleSheet("color: Red;")
                        
                        
                if position == "Seller":
                        s = seller(name,email,password_hash)
                        with open('../DataBase/Sellers.pkl', 'rb') as handle:
                                sellers_list = pickle.load(handle)
                        sellers_Id_list = [i.Email for i in sellers_list]
                        sellers_list.append(s)
                        if s.Email not in sellers_Id_list:

                                with open('../DataBase/Sellers.pkl', 'wb') as handle:
                                        pickle.dump(sellers_list, handle)
                                with open('../DataBase/logined.pkl', 'wb') as handle:
                                        pickle.dump(s, handle)
                                self.page.close()
                                os.system('python Main.py')
                        else:
                                self.Error_Email_LB.setHidden(False)
                                self.Error_Email_LB.setText(_translate("RegisterPage", "Your Email exist in our database!"))
                                self.Error_Email_LB.setStyleSheet("color: Red;")
                        
    

    def retranslateUi(self, RegisterPage):
        _translate = QtCore.QCoreApplication.translate
        RegisterPage.setWindowTitle(_translate("RegisterPage", "Register"))
        self.UserName_LB.setText(_translate("RegisterPage", "Your Name "))
        self.UserName_LE.setPlaceholderText(_translate("RegisterPage", "First and last name"))
        self.Password_LE.setPlaceholderText(_translate("RegisterPage", "Password"))
        self.Password_LB.setText(_translate("RegisterPage", "Password"))
        self.RePassword_LB.setText(_translate("RegisterPage", "Re-enter password"))
        self.RePassword_LE.setPlaceholderText(_translate("RegisterPage", "At least 6 characters"))
        self.Position_CB.setItemText(0, _translate("RegisterPage", "Customer"))
        self.Position_CB.setItemText(1, _translate("RegisterPage", "Seller"))
        self.Position_LB.setText(_translate("RegisterPage", "Position"))
        self.Email_LE.setPlaceholderText(_translate("RegisterPage", "Email"))
        self.Email_LB.setText(_translate("RegisterPage", "Email"))
        self.Register_PB.setText(_translate("RegisterPage", "Register"))
        self.Singin_LB.setText(_translate("RegisterPage", "\n"
"Already have an account?"))
        self.Signin_PB.setText(_translate("RegisterPage", "Sign in"))


# # if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     RegisterPage = QtWidgets.QWidget()
#     ui = Ui_RegisterPage()
#     ui.setupUi(RegisterPage)
#     RegisterPage.show()
#     sys.exit(app.exec_())
